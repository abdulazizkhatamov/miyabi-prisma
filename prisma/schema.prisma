// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS //
enum OrderStatus {
  pending
  paid
  shipped
  delivered
  canceled
}

enum ImageType {
  category
  product
  banner
}

// MODELS //
model Admin {
  id         String   @id @default(uuid())
  first_name String
  last_name  String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id         String   @id @default(uuid())
  first_name String
  last_name  String?
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  orders Order[]
}

model Address {
  id         String   @id @default(uuid())
  address    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  orders Order[]
}

model Category {
  id          String   @id @default(uuid())
  slug        String   @unique
  name        String
  description String?
  status      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  products Product[]
  images   Image[]
}

model Product {
  id          String   @id @default(uuid())
  slug        String   @unique
  name        String
  description String
  weight      Int
  price       Decimal  @db.Decimal(10, 2) // consistent, precise
  status      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category    Category? @relation(fields: [category_id], references: [id])
  category_id String

  order_items OrderItem[]
  images      Image[]
}

model Order {
  id          String      @id @default(uuid())
  status      OrderStatus @default(pending)
  total_price Decimal     @default(0.00) @db.Decimal(10, 2) // matches product price scale
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?

  address    Address? @relation(fields: [address_id], references: [id])
  address_id String?

  order_items OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  quantity   Int      @default(1)
  price      Decimal  @db.Decimal(10, 2) // snapshot of product price
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String

  product    Product @relation(fields: [product_id], references: [id])
  product_id String
}

model Banner {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  images Image[]
}

model Image {
  id         String    @id @default(uuid())
  path       String
  type       ImageType
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  product    Product? @relation(fields: [product_id], references: [id])
  product_id String?

  category    Category? @relation(fields: [category_id], references: [id])
  category_id String?

  banner    Banner? @relation(fields: [banner_id], references: [id])
  banner_id String?
}